# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
st_crs(insc_ch) == st_crs(cities_5km)
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng = as.numeric(i_sm$longitude), lat = as.numeric(i_sm$latitude))
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf4326, crs = st_crs(cities_5km))
crs(insc_sf3035)
crs(cities_5km) # now, they have the same reference system
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
st_crs(insc_ch) == st_crs(cities_5km)
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_union(cities_5km))
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersection(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
nrow(insc_urban)
nrow(insc_urban) / nrow(insc_urban)
nrow(insc_urban) / nrow(insc_rural)
?st_intersects()
plot(insc_ch, col = "red")
plot(insc_sf3035, add = TRUE)
head(c_buff)
inscriptions_per_buffer <- st_intersects(cities_it, insc_sf3035)
View(inscriptions_per_buffer)
unlist(inscriptions_per_buffer)
length(unlist(inscriptions_per_buffer))
length(unique(unlist(inscriptions_per_buffer)))
View(inscriptions_per_buffer)
inscriptions_per_buffer
inscriptions_per_buffer <- st_intersects(cities_it)
inscriptions_per_buffer
View(cities_it)
length(unlist(cities_it))
inscriptions_per_buffer <- st_intersects(cities_it, insc_sf3035)
inscriptions_per_buffer
length(unlist(inscriptions_per_buffer))
sum(duplicated(unlist(inscriptions_per_buffer)))
sum(duplicated(unlist(inscriptions_per_buffer)))
# Verify the projection is 'projected' not 'geographic'
st_crs(cities_sf3035)
# another way:
st_is_longlat(cities_sf3035)
# Make buffer of 5 km. Check the units of your object to correctly assign value to dist
cities_5km<- st_buffer(cities_sf3035,dist = 5000)
# Plot the first 10 buffers and cities to check result
plot(st_geometry(cities_5km)[1:10], col = "yellow")
plot(st_geometry(cities_sf3035)[1:10], pch=20, cex = 0.1, add = TRUE)
# Grab the first 10 elements in the sf object and the buffer
ten_buffers <- cities_5km %>% slice(1:10)
ten_cities <- cities_sf3035 %>% slice(1:10)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "green") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 0.5, auto.placement = 5) +
tm_dots(col = "black",
size = 0.1) +
tm_scale_bar(breaks = c(0,10,20),
text.size = 15,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "bottom"),
text = "Credit: Aske Svane Qvist") +
tm_layout(main.title = "Ancient Cities with 5 km Buffers",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Wrangle the coordinates into a plottable format
i_sm <- inscriptions %>%
drop_na(coordinates) %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng = as.numeric(i_sm$longitude), lat = as.numeric(i_sm$latitude))
i <- inscriptions %>%
drop_na(coordinates) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) %>%
filter(longitude > 5 & longitude < 20)
View(i)
# the filter is working
min(i$longitude)
max(i$longitude)
# Create a sf object
insc_sf4326 <- st_as_sf(i, coords = c("longitude", "latitude"), crs = 4326)
class(insc_sf4326)
# Plot
plot(st_geometry(insc_sf4326))
crs(insc_sf4326)
crs(cities_5km)
crs(cities_5km)
# Plot
plot(st_geometry(insc_sf4326))
crs(insc_sf4326)
crs(cities_5km)
st_crs(cities_5km)
st_crs(insc_sf4326)
crs(cities_5km)
crs(insc_sf4326)
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf4326, crs = st_crs(cities_5km))
crs(insc_sf4326)
crs(insc_sf3035)
crs(cities_5km) # now, they have the same reference system
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
st_crs(insc_ch) == st_crs(cities_5km)
plot(insc_ch, col = "red")
plot(insc_sf3035, add = TRUE)
length(cities_it)
length(cities_it)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Convertthe table into an sf object on the basis of X and Y columns
cities_sf <- st_as_sf(cities, coords = c("Longitude (X)", "Latitude (Y)"))
class(cities_sf)
# Define the projection of Lat/Long coordinates as EPSG 4326
cities_sf4326<- st_set_crs(cities_sf, 4326)
# Transform the projection to a 2D projection using EPSG 3035
cities_sf3035<- st_transform(cities_sf4326, 3035)
st_crs(cities_sf3035)
# Verify the projection is 'projected' not 'geographic'
st_crs(cities_sf3035)
st_crs(cities_sf4326)
# another way:
st_is_longlat(cities_sf3035) # FALSE means not geographic
# Make buffer of 5 km. Check the units of your object to correctly assign value to dist
cities_5km<- st_buffer(cities_sf3035,dist = 5000)
# Plot the first 10 buffers and cities to check result
plot(st_geometry(cities_5km)[1:10], col = "yellow")
plot(st_geometry(cities_sf3035)[1:10], pch=20, cex = 0.1, add = TRUE)
# Grab the first 10 elements in the sf object and the buffer
ten_buffers <- cities_5km %>% slice(1:10)
ten_cities <- cities_sf3035 %>% slice(1:10)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
tm_polygons(col = "green") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 0.5, auto.placement = 5) +
tm_dots(col = "black",
size = 0.1) +
tm_scale_bar(breaks = c(0,10,20),
text.size = 15,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "bottom"),
text = "Credit: Aske Svane Qvist") +
tm_layout(main.title = "Ancient Cities with 5 km Buffers",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
# Libraries
library(tidyverse)
library(jsonlite)
library(tidytext)
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("HW03/inscriptions.json")
inscriptions = as_tibble(list_json)
# Check the first couple lines and column names
head(inscriptions)
colnames(inscriptions)
glimpse(inscriptions)
# Wrangle the coordinates into a plottable format
i_sm <- inscriptions %>%
drop_na(coordinates) %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng = as.numeric(i_sm$longitude), lat = as.numeric(i_sm$latitude))
i <- inscriptions %>%
drop_na(coordinates) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) %>%
filter(longitude > 5 & longitude < 20)
# the filter is working
max(i$longitude)
min(i$longitude)
# Create a sf object
insc_sf4326 <- st_as_sf(i, coords = c("longitude", "latitude"), crs = 4326)
# check if it is an sf object
class(insc_sf4326)
# Plot
plot(st_geometry(insc_sf4326))
crs(insc_sf4326)
crs(cities_5km)
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf4326, crs = st_crs(cities_5km))
crs(insc_sf4326)
crs(insc_sf3035)
crs(cities_5km) # now, they have the same reference system
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
# Dobble check if the CRS are the same
st_crs(insc_ch) == st_crs(cities_5km)
plot(insc_ch, col = "red")
plot(insc_sf3035, add = TRUE)
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_union(cities_5km))
length(cities_it)
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
insc_sf3035 <- st_transform(insc_sf4326, crs = 3035)# st_crs(cities_5km)
crs(insc_sf4326)
crs(insc_sf3035)
crs(cities_5km) # now, they have the same reference system
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035))
# Dobble check if the CRS are the same
st_crs(insc_ch) == st_crs(cities_5km)
plot(insc_ch, col = "red")
plot(insc_sf3035, add = TRUE)
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, cities_5km)
length(cities_it)
# plot
plot(insc_ch, col = "red")
plot(insc_sf3035, add = TRUE)
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, cities_5km)
length(cities_it) # Make sure cities_it contains 399 buffers
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
head(c_buff) # 1 feature multipolygon
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersection(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
nrow(insc_urban) / nrow(insc_rural)
# the ratio is 1 to 6.5 meaning that for every rural inscription there will be 6.5 urban inscriptions.
nrow(insc_urban)
nrow(insc_rural)
# the number of inscriptions
nrow(insc_rural)
nrow(insc_urban)
View(cities_it)
#list of inscriptions per each of the 399 buffers
inscriptions_intersecting <- st_intersects(cities_it, insc_sf3035)
length(inscriptions_intersecting)
length(unlist(inscriptions_intersecting))
# Checking out the length
length(unlist(inscriptions_intersecting))
length(unique(unlist(inscriptions_intersecting)))
# calculating the number of unique inscriptions
# some inscriptions might be in the buffer of more than one city and thus be counted twice
length(unique(unlist(inscriptions_intersecting)))
st_crs(cities_it) == st_crs(insc_sf3035)
# number of duplicates
sum(duplicated(unlist(inscriptions_intersecting)))
# Checking out the length of inscriptions intersectiong with the citybuffers
length(unlist(inscriptions_intersecting)) - length(unique(unlist(inscriptions_intersecting)))
# number of duplicates
length(unlist(inscriptions_intersecting)) - length(unique(unlist(inscriptions_intersecting)))
# Clip or select only those cities that fall within the convex hull of inscriptions to reduce the number of calculations.
# I have the object insc_ch made ealier with contains the convex hull of the inscriptions desolved into multipoint. The convex hull is what I plottet earlier in red.
cities_within_CH <- st_intersection(insc_ch, cities_sf3035)
plot(cities_ch)
plot(cities_within_CH )
plot(insc_sf3035, add = TRUE)
plot(insc_ch)
plot(cities_sf3035)
# Plot after selection
plot(cities_within_CH)
plot(insc_sf3035, add = TRUE)
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
?st_distance
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
?st_distance()
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
?st_distance(cities_within_CH, insc_sf3025)
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
st_distance(cities_within_CH, insc_sf3025)
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
st_distance(cities_within_CH, insc_sf3035)
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
min(st_distance(cities_within_CH, insc_sf3035))
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
st_distance(cities_within_CH, insc_sf3035)
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
matrix <- st_distance(cities_within_CH, insc_sf3035, by_element = F)
glimpse(matrix)
# Calculate the mean distance between the inscriptions and nearest settlement in the subset of cities
matrix <- st_distance(cities_within_CH, insc_sf3035)
df <- as.data.frame(matrix)
View(df)
min <- apply(df, 2, min)
min
min <- apply(matrix, 2, min)
min
length(cities_within_CH)
length(insc_sf3035)
length(unlist(insc_sf3035))
# Plot after selection
plot(cities_within_CH)
plot(insc_sf3035, add = TRUE)
# I extract the minimums (min) from the columns (2) and save the distances in 'min_distance'
min_distance <- apply(matrix, 2, min)
min_distance
mean(min_distance)
mean(min_distance)
# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(cities_within_CH)  +
tm_polygons(col = "green") +
tm_shape(ten_cities) +
tm_text("Ancient Toponym", size = 0.5, auto.placement = 5) +
tm_dots(col = "black",
size = 0.1) +
tm_scale_bar(breaks = c(0,10,20),
text.size = 15,
position = c("LEFT", "bottom")) +
tm_compass(position = c("LEFT", "bottom"),
type = "rose",
size = 2) +
tm_credits(position = c("RIGHT", "bottom"),
text = "Credit: Aske Svane Qvist") +
tm_layout(main.title = "Ancient Cities with 5 km Buffers",
bg.color = "beige",
inner.margins = c(0, 0, 0, 0))
View(cities_sf3035)
View(insc_sf3035)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(data = cities_within_CH)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(data = cities_within_CH)
View(cities_within_CH)
cities_within_CH[[15]]
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(data = cities_within_CH$Value)
View(insc_sf3035)
View(insc_sf3035)
colnames(insc_sf3035)
colnames(cities_within_CH)
View(cities_within_CH)
View(i)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude)
leaflet() %>%
addProviderTiles("StamenWatercolor") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude)
leaflet() %>%
addProviderTiles("StamenWatercolor") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude)
Esri.WorldPhysical
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude)
unlist(cities_within_CH)
df <- as.tibble(cities_within_CH)
View(df)
df <- df %>%
separate(col = geometry, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) %>%
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) %>%
filter(longitude > 5 & longitude < 20)
df <- df %>%
separate(col = geometry, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) %>%
#mutate(latitude = as.numeric(latitude),
#       longitude = as.numeric(longitude)) %>%
#filter(longitude > 5 & longitude < 20)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude)
df <- df %>%
separate(col = geometry, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) %>%
#mutate(latitude = as.numeric(latitude),
#       longitude = as.numeric(longitude)) %>%
#filter(longitude > 5 & longitude < 20)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude)
df <- as.tibble(cities_within_CH)
df <- df %>%
separate(col = geometry, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) %>%
#mutate(latitude = as.numeric(latitude),
#       longitude = as.numeric(longitude)) %>%
#filter(longitude > 5 & longitude < 20)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude)
df <- as.tibble(cities_within_CH)
df <- df %>%
separate(col = geometry, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) #%>%
df <- df %>%
separate(col = geometry, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) #%>%
df <- as.tibble(cities_within_CH)
df <- df %>%
separate(col = geometry, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric)) #%>%
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude) %>%
addCircleMarkers(lng = df$longitude, lat = df$latitude, group="Hot Springs", radius = 4, opacity=1, fill = "darkblue",stroke=TRUE, fillOpacity = 0.75, weight=2, fillColor = "yellow")
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude) %>%
addCircleMarkers(lng = df$longitude, lat = df$latitude)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addCircleMarkers(lng = i$longitude, lat = i$latitude)
# Plot the first 10 buffers and cities to check result
plot(st_geometry(cities_5km)[1:10], col = "yellow")
library(sf)
library(raster)
library(tidyverse)
# Plot the first 10 buffers and cities to check result
plot(st_geometry(cities_5km)[1:10], col = "yellow")
plot(st_geometry(cities_sf3035)[1:10], pch=20, cex = 0.1, add = TRUE)
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng = as.numeric(i_sm$longitude), lat = as.numeric(i_sm$latitude))
# Libraries
library(tidyverse)
library(jsonlite)
library(tidytext)
# Wrangle the coordinates into a plottable format
i_sm <- inscriptions %>%
drop_na(coordinates) %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng = as.numeric(i_sm$longitude), lat = as.numeric(i_sm$latitude))
# Create a quick tmap
library(tmap)
# Wrangle the coordinates into a plottable format
i_sm <- inscriptions %>%
drop_na(coordinates) %>%
slice(1:100) %>%
separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
mutate(latitude = lapply(str_extract_all(latitude, "[0-9.]+"), as.numeric),
longitude = lapply(str_extract_all(longitude, "[0-9.]+"), as.numeric))
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng = as.numeric(i_sm$longitude), lat = as.numeric(i_sm$latitude))
library(leaflet)
# Check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng = as.numeric(i_sm$longitude), lat = as.numeric(i_sm$latitude))
# Plot
plot(st_geometry(insc_sf4326))
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, st_geometry(cities_5km))
length(cities_it) # Make sure cities_it contains 399 buffers
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
head(c_buff) # 1 feature multipolygon
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersection(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
# Create a buffer from a cluster of cities that fall within the convex hull
cities_it <- st_intersection(insc_ch, cities_5km)
length(cities_it) # Make sure cities_it contains 399 buffers
# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)
head(c_buff) # 1 feature multipolygon
# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersection(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)
# start by making sure it is the same CRS for both cities and inscriptions
st_crs(cities_it) == st_crs(insc_sf3035)
#list of inscriptions per each of the 399 buffers
# th inscriptions intersecting with the city buffers in cities_it
inscriptions_intersecting <- st_intersects(cities_it, insc_sf3035)
View(inscriptions_intersecting)
head(inscriptions_intersecting)
summary(inscriptions_intersecting)

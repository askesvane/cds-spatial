geom_point() +
geom_line()
# Create a scatter plot of tree_density vs avg_canopy
ggplot(neighborhoods_avg_canopy, aes(x = tree_density, y = avg_canopy)) +
geom_point() +
geom_smooth()
# Create a scatter plot of tree_density vs avg_canopy
ggplot(neighborhoods_avg_canopy, aes(x = tree_density, y = avg_canopy)) +
geom_point() +
geom_smooth(method = "lm")
# Compute the correlation between density and canopy
cor(neighborhoods$tree_density, neighborhoods$avg_canopy)
# Compute the correlation between density and canopy
cor(neighborhoods_avg_canopy$tree_density, neighborhoods_avg_canopy$avg_canopy)
# Simplify name
neighborhoods <- neighborhoods_avg_canopy
crs(neighborhoods)
st_crs(neighborhoods)
# Plot the tree density with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = tree_density))
# Plot the tree canopy with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy))
# Plot the tree density using scale_fill_gradient()
ggplot(neighborhoods) +
geom_sf(aes(fill = tree_density)) +
scale_fill_gradient(low = "#edf8e9", high = "#005a32")
# Plot the tree canopy using the scale_fill_gradient()
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy)) +
scale_fill_gradient(low = "#edf8e9", high = "#005a32")
# Load tmap library
library(tmap)
# Create a simple map of neighborhoods
tm_shape(neighborhoods) +
tm_polygons()
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(fill = tree_density)
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(fill = neighborhoods$tree_density)
?tm_polygons
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = neighborhoods$tree_density)
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = tree_density)
View(neighborhoods)
?tm_polygons
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = 'tree_density')
# Style the tree density map
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "green",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# Style the tree density map
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# Create a similar map of average tree canopy
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Create a similar map of average tree canopy
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Create a similar map of average tree canopy
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
View(neighborhoods)
# Create a similar map of average tree canopy
avg_canopy_df <- filter(neighborhoods, avg_canopy)
# Create a similar map of average tree canopy
avg_canopy_df <- select(neighborhoods, avg_canopy)
?select()
# Create a similar map of average tree canopy
avg_canopy_df <- select(neighborhoods, tree_density)
# Create a similar map of average tree canopy
head(neighborhoods)
avg_canopy_df <- avg_canopy_df %>% as.tibble() %>% select(tree_density)
avg_canopy_df <- neighborhoods %>% as.tibble() %>% select(tree_density)
View(avg_canopy_df)
avg_canopy_df <- neighborhoods %>% as.tibble()# %>% select()
View(avg_canopy_df)
avg_canopy_df <- neighborhoods %>% as.tibble() %>% select(avg_canopy_df)
tm_shape(neighborhoods) +
tm_polygons("tree_cnt", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
canopy_neighborhoods
View(canopy_neighborhoods)
canopy_neighborhoods <- as.tibble(canopy_neighborhoods )
View(canopy_neighborhoods)
canopy_neighborhoods <- canopy_neighborhoods %>% as.tibble() %>% rename(V1 = avg_canopy)
canopy_neighborhoods <- canopy_neighborhoods %>% as.tibble() %>% rename(avg_canopy = V1)
View(canopy_neighborhoods)
# Add the mean canopy values to neighborhoods
neighborhoods_avg_canopy <- mutate(neighborhoods_crs, avg_canopy = canopy_neighborhoods)
# Load data and libraries
library(sf, raster, dplyr)
# Read in the trees shapefile
trees <- st_read("../Week02/data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Compute the counts of all trees by hood (postcode)
tree_counts <- count(trees, nta)
# Load data and libraries
library(sf, raster, dplyr)
# Read in the trees shapefile
trees <- st_read("../Week02/data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- st_read("../Week02/data/neighborhoods.shp")
# Read in the tree canopy single-band raster
canopy <- raster("../Week02/data/canopy.tif")
# Read in the manhattan Landsat image multi-band raster
manhattan <- brick("../Week02/data/manhattan.tif")
# Compute the counts of all trees by hood (postcode)
tree_counts <- count(trees, nta)
sum(tree_counts$n) # This matches the total amount of rows in trees
# Take a quick look
head(tree_counts)
# Remove the geometry
tree_counts_no_geom <- st_drop_geometry(tree_counts)
head(tree_counts_no_geom) # the geometry column has been removed
# Rename the n variable to tree_cnt
tree_counts_renamed <- rename(tree_counts_no_geom, tree_cnt = n)
head(tree_counts_renamed) # now n is renamed to tree_cnt
# Create histograms of the total counts
hist(tree_counts_renamed$tree_cnt)
# Compute areas and unclass
areas <- unclass(st_area(neighborhoods))
length(areas) # length is 195 --> matches number of rows in neighborhoods
plot(neighborhoods)
# Add the areas to the neighborhoods object
neighborhoods_area <- mutate(neighborhoods, area = areas)
# Join neighborhoods and counts by shared columns (find the matching one in neighborhoods)
neighborhoods_counts <- left_join(neighborhoods_area,
tree_counts_renamed, by = c("ntacode" = "nta"))
# Replace NA values with 0 (lookup ifelse() function if needed)
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_cnt = ifelse(is.na(tree_cnt),
0, tree_cnt))
# Compute the density
neighborhoods_counts <- mutate(neighborhoods_counts,
tree_density = tree_cnt/area)
# Confirm that you have the neighborhood density results
head(neighborhoods_counts)
# Transform the neighborhoods CRS to match the canopy layer
neighborhoods_crs <- st_transform(neighborhoods_counts, crs = crs(canopy, asText = TRUE))
st_crs(neighborhoods_crs) == st_crs(canopy)
# Convert neighborhoods object to a Spatial object (optional)
class(neighborhoods_counts)
neighborhoods_sp <- as(neighborhoods_crs, "Spatial")
class(neighborhoods_sp) # we transformed it from a df to a spatial object
# Compute the mean of canopy values by neighborhood
canopy_neighborhoods <- raster::extract(canopy, neighborhoods_sp, fun = mean)
# Add the mean canopy values to neighborhoods
neighborhoods_avg_canopy <- mutate(neighborhoods_crs, avg_canopy = canopy_neighborhoods)
class(neighborhoods_avg_canopy) # now we have both the average canopy and tree density by postcodes
# Load the ggplot2 package
library(tidyverse) # includes ggplot2
# Create a histogram of tree density (tree_density)
ggplot(neighborhoods_avg_canopy, aes(x = tree_density)) +
geom_histogram(color = "white")
canopy_neighborhoods2 <- canopy_neighborhoods %>% as.tibble() %>% rename(avg_canopy = V1)
neighborhoods_avg_canopy2 <- cbind(neighborhoods_crs, canopy_neighborhoods2)
class(neighborhoods_avg_canopy2)
class(canopy_neighborhoods2)
class(neighborhoods_crs)
canopy_neighborhoods2 <- canopy_neighborhoods %>% as.data.frame() %>% rename(avg_canopy = V1)
neighborhoods_avg_canopy2 <- cbind(neighborhoods_crs, canopy_neighborhoods2)
class(neighborhoods_avg_canopy2)
View(neighborhoods_crs)
neighborhoods_avg_canopy2 <- as.tibble(neighborhoods_avg_canopy2)
View(neighborhoods_crs)
View(neighborhoods_counts)
View(neighborhoods_avg_canopy2)
# Confirm that you have the neighborhood density results
head(neighborhoods_counts)
# Transform the neighborhoods CRS to match the canopy layer
neighborhoods_crs <- st_transform(neighborhoods_counts, crs = crs(canopy, asText = TRUE))
st_crs(neighborhoods_crs) == st_crs(canopy)
# Convert neighborhoods object to a Spatial object (optional)
class(neighborhoods_counts)
# Convert neighborhoods object to a Spatial object (optional)
class(neighborhoods_crs)
neighborhoods_sp <- as(neighborhoods_crs, "Spatial")
class(neighborhoods_sp) # we transformed it from a df to a spatial object
# Compute the mean of canopy values by neighborhood
canopy_neighborhoods <- raster::extract(canopy, neighborhoods_sp, fun = mean)
# Add the mean canopy values to neighborhoods
neighborhoods_avg_canopy <- mutate(neighborhoods_sp, avg_canopy = canopy_neighborhoods)
class(neighborhoods_avg_canopy) # now we have both the average canopy and tree density by postcodes
head(neighborhoods_avg_canopy)
# Load the ggplot2 package
library(tidyverse) # includes ggplot2
# Create a histogram of tree density (tree_density)
ggplot(neighborhoods_avg_canopy, aes(x = tree_density)) +
geom_histogram(color = "white")
# Create a histogram of average canopy (avg_canopy)
ggplot(neighborhoods_avg_canopy, aes(x = avg_canopy)) +
geom_histogram(color = "white")
# Create a histogram of tree density (tree_density)
ggplot(neighborhoods_avg_canopy, aes(x = tree_density)) +
geom_histogram(color = "white")
# Create a histogram of average canopy (avg_canopy)
ggplot(neighborhoods_avg_canopy, aes(x = avg_canopy)) +
geom_histogram(color = "white")
# Create a scatter plot of tree_density vs avg_canopy
ggplot(neighborhoods_avg_canopy, aes(x = tree_density, y = avg_canopy)) +
geom_point() +
geom_smooth(method = "lm")
# Compute the correlation between density and canopy
cor(neighborhoods_avg_canopy$tree_density, neighborhoods_avg_canopy$avg_canopy)
# Simplify name
neighborhoods <- neighborhoods_avg_canopy
crs(neighborhoods)
# Plot the tree density with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = tree_density))
# Plot the tree canopy with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy))
# Plot the tree density using scale_fill_gradient()
ggplot(neighborhoods) +
geom_sf(aes(fill = tree_density)) +
scale_fill_gradient(low = "#edf8e9", high = "#005a32")
# Plot the tree canopy using the scale_fill_gradient()
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy)) +
scale_fill_gradient(low = "#edf8e9", high = "#005a32")
# Load tmap library
library(tmap)
# Create a simple map of neighborhoods
tm_shape(neighborhoods) +
tm_polygons()
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = 'tree_density')
# Style the tree density map
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# Create a similar map of average tree canopy
head(neighborhoods)
tm_shape(neighborhoods) +
tm_polygons("tree_cnt", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
lst <- lapply(neighborhoods, unlist)
View(lst)
data.frame(lapply(lst, `length<-`, max(lengths(lst))))
neighborhood2 <- data.frame(lapply(lst, `length<-`, max(lengths(lst))))
View(neighborhood2)
neighborhood2 <- data.frame(lapply(lst, `length<-`, min(lengths(lst))))
View(neighborhood2)
tm_shape(neighborhoods2) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
tm_shape(neighborhood2) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
neighborhood2 <- neighborhood2 %>% mutate(geometry = neighborhoods$geometry)
tm_shape(neighborhood2) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
neighborhood2 <- neighborhood2 %>% mutate(geometry = neighborhoods$geometry)
tm_shape(neighborhood2) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
neighborhood2 <- as(neighborhood2, "Spatial")
neighborhood2 <- as(neighborhood2, "Spatial")
neighborhood2 <- neighborhood2 %>% mutate(geometry = neighborhoods$geometry)
# Create a similar map of average tree canopy
head(neighborhoods)
avg_canopy_df <- neighborhoods %>% as.tibble() %>% select(avg_canopy)
View(avg_canopy_df)
avg_canopy_df <- neighborhoods %>% select(avg_canopy) %>% as.tibble()
avg_canopy_df <- neighborhoods %>% as.tibble() %>% select(avg_canopy)
class(avg_canopy_df)
lst <- lapply(avg_canopy_df, unlist)
avg_canopy_df <- data.frame(lapply(lst, `length<-`, min(lengths(lst))))
View(avg_canopy_df)
neighborhoods2 <- mutate(neighborhoods, avg_canopy = avg_canopy_df$avg_canopy)
# Create a similar map of average tree canopy
head(neighborhoods)
class(neighborhood2)
tm_shape(neighborhoods2) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Create a similar map of average tree canopy
head(neighborhoods)
avg_canopy_df <- neighborhoods %>% as.tibble() %>% select(avg_canopy)
avg_canopy_df <- data.frame(lapply(lst, `length<-`, min(lengths(lst))))
neighborhoods2 <- mutate(neighborhoods, avg_canopy = avg_canopy_df$avg_canopy)
tm_shape(neighborhoods2) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
class(neighborhoods2)
class(neighborhoods)
# plot it
tm_shape(neighborhoods2) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Style the tree density map
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# Load tmap library
library(tmap)
# Create a map of the manhattan aerial photo
tm_shape(manhattan) +
tm_raster()
# Create a map of the neighborhood polygons
tm_shape(neighborhoods) +
tm_borders(col = "black", lwd = 0.5, alpha = 0.5)
plotRGB(manhatten)
plotRGB(manhattan)
?rm_raster()
?tm_raster()
# Create a map of the manhattan aerial photo
tm_shape(manhattan) +
tm_raster()
plotRGB(manhattan)
# Create a map of the manhattan aerial photo
tm_shape(manhattan) +
tm_rgb()
# Create a map of the neighborhood polygons
tm_shape(neighborhoods) +
tm_borders(col = "black", lwd = 0.5, alpha = 0.5)
map1 <-
tm_shape(manhattan) + tm_rgb() +
tm_shape(neighborhoods) + tm_borders(col = "black", lwd = 0.5, alpha = 0.5)
map1
map1 <-
tm_shape(manhattan) + tm_rgb() +
tm_shape(neighborhoods) + tm_borders(col = "black", lwd = 1, alpha = 0.5)
map1
map1 <-
tm_shape(manhattan) + tm_rgb() +
tm_shape(neighborhoods) + tm_borders(col = "black", lwd = 1, alpha = 1)
map1
# I use mutate to overwrite the weird 'list column' with the new numeric column. This will ensure that we keep the eometric column and that the df stays as an sf object
neighborhoods <- mutate(neighborhoods, avg_canopy = avg_canopy_df$avg_canopy)
class(neighborhoods)
# plot it
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = 'tree_density')
# Style the tree density map
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# Style the tree density map
map2 <- tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
map3 <- tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Style the tree density map
map2 <- tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
map3 <- tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
tmap_arrange(map1, map2, map3, asp = NA)
tmap_arrange(map1, map2, asp = NA)
manhattan_new <- st_bbox(manhattan)
manhattan_box <- st_bbox(manhattan)
# Style the tree density map
map2 <- tm_shape(neighborhoods, bbox = manhattan_box) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
map2
map3 <- tm_shape(neighborhoods, bbox = manhattan_box) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
tmap_arrange(map1, map2, asp = NA)
tmap_arrange(map1, map2, map3, asp = NA)
tmap_arrange(map1, map2, map3, asp = NA)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
map1
tmap_arrange(map1, map2, map3, asp = NA)
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
View(neighborhood2)
# Simplify name
neighborhoods <- neighborhoods_avg_canopy
crs(neighborhoods)
# Plot the tree density with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = tree_density))
# Plot the tree canopy with default colors
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy))
# Plot the tree density using scale_fill_gradient()
ggplot(neighborhoods) +
geom_sf(aes(fill = tree_density)) +
scale_fill_gradient(low = "#edf8e9", high = "#005a32")
# Plot the tree canopy using the scale_fill_gradient()
ggplot(neighborhoods) +
geom_sf(aes(fill = avg_canopy)) +
scale_fill_gradient(low = "#edf8e9", high = "#005a32")
# Load tmap library
library(tmap)
# Create a simple map of neighborhoods
tm_shape(neighborhoods) +
tm_polygons()
# Create a color-coded map of neighborhood tree density
tm_shape(neighborhoods) +
tm_polygons(col = 'tree_density')
# Style the tree density map
# RIght now, the three density is in square meters. I change it to be in square KM
neighborhoods <- neighborhoods %>% mutate(tree_density = tree_density * 1000 * 1000)
tm_shape(neighborhoods) +
tm_polygons("tree_density", palette = "Greens",
style = "quantile", n = 7,
title = "Trees per sq. KM")
# Create a similar map of average tree canopy
head(neighborhoods)
class(neighborhoods)
lst <- lapply(avg_canopy_df, unlist)
# plot it
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Unlist avg_canopy and create it as a single column df
avg_canopy_df <- neighborhoods %>% as.tibble() %>% select(avg_canopy)
lst <- lapply(avg_canopy_df, unlist)
avg_canopy_df <- data.frame(lapply(lst, `length<-`, min(lengths(lst))))
# I use mutate to overwrite the weird 'list column' with the new numeric column. This will ensure that we keep the eometric column and that the df stays as an sf object
neighborhoods <- mutate(neighborhoods, avg_canopy = avg_canopy_df$avg_canopy)
class(neighborhoods)
# plot it
tm_shape(neighborhoods) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
# Create a map of the manhattan aerial photo
tm_shape(manhattan) +
tm_rgb()
# Create a map of the neighborhood polygons
tm_shape(neighborhoods) +
tm_borders(col = "black", lwd = 0.5, alpha = 0.5)
# create map 1
map1 <-
tm_shape(manhattan) + tm_rgb() +
tm_shape(neighborhoods) + tm_borders(col = "black", lwd = 1, alpha = 1)
map1
map2
# the canopy map
map3 <- tm_shape(neighborhoods, bbox = manhattan_box) +
tm_polygons("avg_canopy", palette = "Greens",
style = "quantile", n = 7,
title = "Average tree canopy (%)")
map3
tmap_arrange(map1, map2, map3, asp = NA)
